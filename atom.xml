<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bayuedekui的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.bayuedekui.com/"/>
  <updated>2020-01-21T16:36:04.767Z</updated>
  <id>http://www.bayuedekui.com/</id>
  
  <author>
    <name>八月的葵</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hello-word</title>
    <link href="http://www.bayuedekui.com/2020/01/21/hello-world/"/>
    <id>http://www.bayuedekui.com/2020/01/21/hello-world/</id>
    <published>2020-01-21T15:03:36.051Z</published>
    <updated>2020-01-21T16:36:04.767Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="title-Hello-World"><a href="#title-Hello-World" class="headerlink" title="title: Hello World"></a>title: Hello World</h2><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;title-Hello-World&quot;&gt;&lt;a href=&quot;#title-Hello-World&quot; class=&quot;headerlink&quot; title=&quot;title: Hello World&quot;&gt;&lt;/a&gt;title: Hello World&lt;/h2&gt;&lt;p&gt;Wel
      
    
    </summary>
    
    
    
      <category term="test" scheme="http://www.bayuedekui.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>first-hexoblog</title>
    <link href="http://www.bayuedekui.com/2020/01/21/first-hexoblog/"/>
    <id>http://www.bayuedekui.com/2020/01/21/first-hexoblog/</id>
    <published>2020-01-21T15:03:36.049Z</published>
    <updated>2020-01-21T16:36:46.624Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="title-答辩准备"><a href="#title-答辩准备" class="headerlink" title="title: 答辩准备"></a>title: 答辩准备</h2><h3 id="公司项目比较好-不要把项目写的太大，不要全是你写的，不过你一定要做了一块主要的地方，把你工作内容写出来-论文设计部分和实现部分要对应起来"><a href="#公司项目比较好-不要把项目写的太大，不要全是你写的，不过你一定要做了一块主要的地方，把你工作内容写出来-论文设计部分和实现部分要对应起来" class="headerlink" title="公司项目比较好//不要把项目写的太大，不要全是你写的，不过你一定要做了一块主要的地方，把你工作内容写出来//论文设计部分和实现部分要对应起来"></a>公司项目比较好//不要把项目写的太大，不要全是你写的，不过你一定要做了一块主要的地方，把你工作内容写出来//论文设计部分和实现部分要对应起来</h3><h4 id="1-论文中使用的k8s集群-v1-12-涉及相关接口知识点"><a href="#1-论文中使用的k8s集群-v1-12-涉及相关接口知识点" class="headerlink" title="1.论文中使用的k8s集群(v1.12)涉及相关接口知识点"></a>1.论文中使用的k8s集群(v1.12)涉及相关接口知识点</h4><ul><li><p><strong>pods</strong></p><p>创建一个pod:本系统是通过rc来创建pod对象的</p><p>获取指定pod信息：GET  /api/v1/namespaces/{namespace}/pods/{name}</p><p>如图所示是一个pods所有信息：<img src="C:%5CUsers%5Czhengkui%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1557384292002.png" alt="1557384292002">    其中status中的“phase”属性就是pod是否运行正常状态</p><p><img src="C:%5CUsers%5Czhengkui%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1557384445771.png" alt="1557384445771"></p><p><img src="C:%5CUsers%5Czhengkui%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1557384926009.png" alt="1557384926009"></p><p>删除指定pod：DELETE  /api/v1/namespaces/{namespace}/pods/{podsname}</p><p>不过在采用rc创建pods后，采用如下方法删除pods</p><p><img src="C:%5CUsers%5Czhengkui%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1557385001177.png" alt="1557385001177"></p><ul><li><strong>rc(replication controller)：</strong></li></ul><p>创建rc对象接口：POST /api/v1/namespaces/{namespace}/replicationcontrollers   </p><p>删除RC: DELETE /api/v1/namespaces/{namespace}/replicationcontrollers/{name}</p><p>获取rc列表：GET /api/v1/namespaces/{namespace}/replicationcontrollers</p><p>替换指定rc:PUT /api/v1/namespaces/{namespace}/replicationcontrollers/{name}</p><p>​    注意：所有的命名空间均使用的是默认命名空见default</p></li><li><p><strong>service:</strong></p><p>创建service：POST /api/v1/namespaces/{namespace}/services</p><p>删除指定service：DELETE /api/v1/namespaces/{namespace}/services/{name}</p><p>获取某个service信息：GET /api/v1/namespaces/{namespace}/services/{name}</p><p>显示所有service列表：GET /api/v1/namespaces/{namespace}/services</p><p>​    注意：命名空间同样使用的是default默认命名空间（{namespace}被替换为default）</p></li><li><p><strong>关于集群的RBAC验证关闭，采用token的方式对api请求做权限验证</strong></p><p><img src="C:%5CUsers%5Czhengkui%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1557404577511.png" alt="1557404577511"></p><p>采用静态token认证，引入静态token文件，讲–advertise-mode由之前RBAC修改为AlwaysAllow防止集群频繁重启</p></li></ul><h4 id="2-总结四种get-post-put-delete创建rc与service的方法，传入参数情况"><a href="#2-总结四种get-post-put-delete创建rc与service的方法，传入参数情况" class="headerlink" title="2.总结四种get,post,put,delete创建rc与service的方法，传入参数情况"></a>2.总结四种get,post,put,delete创建rc与service的方法，传入参数情况</h4><p>get,post都差不多，采用你restTemplate.exchange()指定请求方式</p><p>delete:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        HttpHeaders headers=<span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        headers.setContentType(MediaType.APPLICATION_JSON);</span><br><span class="line">        headers.add(<span class="string">"Authorization"</span>,<span class="string">"Bearer 7db2f1c02d721320"</span>);</span><br><span class="line">        HttpEntity&lt;String&gt; httpEntity=<span class="keyword">new</span> HttpEntity&lt;&gt;(headers);<span class="comment">//delete可以在路径中进行删除，可以不用传参数，传个头文件就ok了。</span></span><br><span class="line">ResponseEntity&lt;String&gt; response=restTemplate.exchange(   <span class="string">"https://192.168.172.135:6443/api/v1/namespaces/default/replicationcontrollers/mysql-rc"</span>,</span><br><span class="line">                HttpMethod.DELETE,</span><br><span class="line">                httpEntity,</span><br><span class="line">                String.class);</span><br></pre></td></tr></table></figure><p>put:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        HttpHeaders headers=<span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        headers.setContentType(MediaType.APPLICATION_JSON);</span><br><span class="line">        headers.add(<span class="string">"Authorization"</span>,<span class="string">"Bearer 7db2f1c02d721320"</span>);</span><br><span class="line">        HttpEntity&lt;String&gt; httpEntity=<span class="keyword">new</span> HttpEntity&lt;&gt;(JSONObject.valueToString(RC),headers);<span class="comment">//put需要传一个对象进来，讲副本数设置为0</span></span><br><span class="line">ResponseEntity&lt;String&gt; response=restTemplate.exchange(   <span class="string">"https://192.168.172.135:6443/api/v1/namespaces/default/replicationcontrollers/mysql-rc"</span>,</span><br><span class="line">                HttpMethod.PUT,</span><br><span class="line">                httpEntity,</span><br><span class="line">                String.class);</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5Czhengkui%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1557387109622.png" alt="1557387109622"></p><h4 id="3-本文系统paas平台所涉及到的相关概念（租户，逻辑多租，物理多租）"><a href="#3-本文系统paas平台所涉及到的相关概念（租户，逻辑多租，物理多租）" class="headerlink" title="3.本文系统paas平台所涉及到的相关概念（租户，逻辑多租，物理多租）"></a>3.本文系统paas平台所涉及到的相关概念（租户，逻辑多租，物理多租）</h4><p><strong>paas(platform as a service):</strong>PAAS之所以能够推进SaaS的发展，主要在于它能够提供企业进行定制化研发的中间件平台，同时涵盖数据库和应用服务器等。</p><p>首先我们先确定PaaS的定义：即平台即服务，是指将软件研发的平台(也可以是业务基础平台)作为一种服务，PaaS的出现可以加快SaaS的发展，尤其是加快SaaS应用的开发速度。</p><p>​        PaaS的分类：应用部署和运行平台APaaS(application platform as a service)和集成平台IPaaS(integration as a service)。</p><p>　　<strong>APaaS(application platform as a Service应用部署的运行平台及即务)</strong>:是仅提供应用的部署和运行平台，目前国内大多数PaaS平台均为APaaS平台，如畅捷通、云之家、钉钉、明道。APaaS有一个突出的弊端：APaaS中的的APP是由若干个ISV提供，APP与平台的接入程度较浅，APP之间兼容性很差，信息流、财务流之间不能打通，如需实现则意味着大量的开发工作，ISV和平台是合作关系，并无依托关系，双方的目的明确：销售量的提升和平台功能的完善。</p><p>　　<strong>IPaaS(Integration platform as a Service集成平台即服务):</strong>的功能可以理解为平台为开发者提供了一整套的开发工具和底层(比如数据库服务，缓存服务，消息中间件服务等)，APP是依托于IPaaS开发的，所以APP和平台的接入程度很深，且依赖性很强。<a href="http://www.100ec.cn/zt/world/" target="_blank" rel="noopener">国外</a>比较典型的IPaaS如salesforce，典型的ISV开发者Veeva是基于salesforce开发了针对医疗行业的CRM系统，且有着较为不错的销售额。基于IPaaS的属性，开发者veeva对于salesforce的依赖性很高，基本被锁定在salesforce，但可以实现各个APP之间的信息流打通。平台国内IPaaS提供商较少，比较有代表性的是青云。</p><p>paas平台服务商：新浪SAE或者google GAE（apaas平台），青云（比较典型的ipaas）</p><p>aws、azure、阿里云、腾讯云都在提供IAAS，PAAS和SAAS服务</p><h4 id="4-集群的逻辑多组，物理多租问题"><a href="#4-集群的逻辑多组，物理多租问题" class="headerlink" title="4.集群的逻辑多组，物理多租问题"></a>4.集群的逻辑多组，物理多租问题</h4><h4 id="5-集群k8s核心组件"><a href="#5-集群k8s核心组件" class="headerlink" title="5.集群k8s核心组件"></a>5.集群k8s核心组件</h4><h4 id="6-docker-v17-12"><a href="#6-docker-v17-12" class="headerlink" title="6.docker(v17.12)"></a>6.docker(v17.12)</h4><p>​    在<a href="https://zh.wikipedia.org/wiki/Linux" target="_blank" rel="noopener">Linux</a>操作系统上，提供一个额外的软件<a href="https://zh.wikipedia.org/wiki/抽象層" target="_blank" rel="noopener">抽象层</a>，以及<a href="https://zh.wikipedia.org/wiki/作業系統層虛擬化" target="_blank" rel="noopener">操作系统层虚拟化</a>的自动管理机制.Docker利用<a href="https://zh.wikipedia.org/wiki/Linux核心" target="_blank" rel="noopener">Linux核心</a>中的资源分离机制，例如<a href="https://zh.wikipedia.org/wiki/Cgroups" target="_blank" rel="noopener">cgroups</a>，以及Linux核心<a href="https://zh.wikipedia.org/w/index.php?title=Linux命名空間&action=edit&redlink=1" target="_blank" rel="noopener">名字空间</a>（namespaces），来创建独立的<a href="https://zh.wikipedia.org/wiki/作業系統層虛擬化" target="_blank" rel="noopener">容器</a>（containers）。</p><ul><li><p>构建私有镜像仓库</p><ol><li>docker pull registry</li><li>docker run -d -p 5000:5000 -v /opt/data/registry:/tmp/registry registry<ol><li>docker pull busybox//pull一个比较小的镜像来测试</li></ol></li><li>docker tag busybox 192.168.112.136:5000/busybox//来修改一下该镜像的tag<ol><li>docker push 192.168.112.136:5000/busybox//把打了tag的镜像上传到私服</li></ol></li></ol></li><li><p>构建镜像(采用docker的maven插件构建用户自定义项目的maven插件)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">&lt;finalName&gt;app&lt;/finalName&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;!--docker的maven插件，官网：https:<span class="comment">//github.com/spotify/docker‐maven‐plugin--&gt;</span></span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.4.13&lt;/version&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;imageName&gt;kinspire.cn:5000/$&#123;project.artifactId&#125;:$&#123;project.version&#125;&lt;/imageName&gt;</span><br><span class="line">&lt;baseImage&gt;zkjdk1.8&lt;/baseImage&gt;</span><br><span class="line">&lt;entryPoint&gt;["java", "-jar","/$&#123;project.build.finalName&#125;.jar"]&lt;/entryPoint&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">&lt;resource&gt;</span><br><span class="line">&lt;targetPath&gt;/&lt;/targetPath&gt;</span><br><span class="line">&lt;directory&gt;</span><br><span class="line">$&#123;project.build.directory&#125;</span><br><span class="line">&lt;/directory&gt;</span><br><span class="line">&lt;include&gt;</span><br><span class="line">$&#123;project.build.finalName&#125;.jar</span><br><span class="line">&lt;/include&gt;</span><br><span class="line">&lt;/resource&gt;</span><br><span class="line">&lt;/resources&gt;</span><br><span class="line">&lt;dockerHost&gt;http:<span class="comment">//kinspire.cn:2375&lt;/dockerHost&gt;</span></span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure></li><li><p>采用docker hub上共有镜像</p></li></ul><h4 id="7-答辩可能遇到的问题总结以及扫盲一些知识点"><a href="#7-答辩可能遇到的问题总结以及扫盲一些知识点" class="headerlink" title="7.答辩可能遇到的问题总结以及扫盲一些知识点"></a>7.答辩可能遇到的问题总结以及扫盲一些知识点</h4><ul><li><p>你们部门主要是做什么内容的？</p><p>​        主要为GTS做一些业务，包括移动的一些业务，数据目录，数据治理的业务，也有一些大数据相关的业务。    我们组的主要工作就是做一个内部使用的PaaS平台系统。</p></li><li><p>docker核心：镜像（Image）,容器（container）,仓库（repository）,//搭建、发送、运行//搭建一次到处能用</p></li><li><p>如果想要将Docker应用于具体的业务实现，是存在困难的——编排、管理和调度等各个方面，都不容易。于是，人们迫切需要一套管理系统，对Docker及容器进行更高级更灵活的管理。于是出现了K8s(基于容器的集群管理平台)，一个pod里面可以包含多个container(docker中概念)。</p><p>Master节点包括API Server,Schedulee,Controller Manager,etcd</p><p>//API Server:是整个系统的对外接口，供客户端和其它组件调用,相当于营业厅</p><p>//Scheduler负责对集群内部的资源进行调度，相当于“调度室”。</p><p>//Controller manager负责管理控制器，相当于“大总管”</p></li></ul><p>  Node节点包括Docker、kubelet、kube-proxy、Fluentd、kube-dns（可选），还有就是<strong>Pod</strong>。Pod是Kubernetes最基本的操作单元。一个Pod代表着集群中运行的一个进程，它内部封装了一个或多个紧密相关的容器。除了Pod之外，K8S还有一个<strong>Service</strong>的概念，一个Service可以看作一组提供相同服务的Pod的对外访问接口。</p><p>  //Docker，不用说了，创建容器的。</p><p>  //Kubelet，主要负责监视指派到它所在Node上的Pod，包括创建、修改、监控、删除等。</p><p>  //Kube-proxy，主要负责为Pod对象提供代理。</p><p>  //Fluentd，主要负责日志收集、存储与查询。</p><ul><li>Etcd是Kubernetes集群中的一个十分重要的组件，用于保存集群所有的网络配置和对象的状态信息</li></ul><ul><li><p>​    集群中如何处理负载均衡问题的？</p><p>多个副本数首先可以对请求进行分流，同时Kubernetes中的可以创建Ingress服务，然后用户就可以通过POST ingress资源到APIServer的方式请求ingress,某种意义上相当于nginx,达到负载均衡的效果</p></li></ul><p><a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">https://hexo.io/docs/deployment.html</a>)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;title-答辩准备&quot;&gt;&lt;a href=&quot;#title-答辩准备&quot; class=&quot;headerlink&quot; title=&quot;title: 答辩准备&quot;&gt;&lt;/a&gt;title: 答辩准备&lt;/h2&gt;&lt;h3 id=&quot;公司项目比较好-不要把项目写的太大，不要全是你写的，
      
    
    </summary>
    
    
      <category term="papers" scheme="http://www.bayuedekui.com/categories/papers/"/>
    
    
  </entry>
  
</feed>
